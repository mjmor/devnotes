{"0": {
    "doc": "About",
    "title": "About",
    "content": "Software development notes for data science, infrastructure development, web development, and developer operations (devops). Authored by Max Morgan. Learn more about Max. ",
    "url": "/devnotes/about/",
    
    "relUrl": "/about/"
  },"1": {
    "doc": "AWS",
    "title": "Amazon Web Services (AWS)",
    "content": "Command environment configurations and build commands for AWS services. ",
    "url": "/devnotes/dev-ops/aws#amazon-web-services-aws",
    
    "relUrl": "/dev-ops/aws#amazon-web-services-aws"
  },"2": {
    "doc": "AWS",
    "title": "Setup AWS",
    "content": "The minimal setup to get started using AWS services is: . | Create an AWS root user | Create an AWS user | Add the newly created AWS user to a set of scoped permissions | . Create an AWS Root User . The AWS root user is an admin account with superuser priveleges (complete access to all AWS services and resources in the account). Follow these steps from AWS to create such an account. Create an AWS User . Instead of using the AWS root user for all purposes, it’s safer to follow a model of least privelege and create a user with specific permissions. This is the AWS user. | Enable IAM Identity Center . | Let AWS create an AWS organization unless you’re creating a user for an organization you work with. | Let AWS use Identity Center Directory as the identity source so you can manage users and permission groups from IAM Identity Center. | . | Create admin and power user permission sets . | Go to IAM Identity Center &gt; Permission sets | Create a permission set using a predefined permission set of “AdministratorAccess” | Create a permission set using a predefined permission set of “PowerUserAccess” | . | Create a user in IAM Identity Center | Assign the permission groups to the user . | Go to IAM Identity Center &gt; AWS accounts | Check the box next to the account you created and select ‘Assign Users or Groups’ | Go to the users tab and assign the username you created and click Next | Select both permission sets you created (AdministratorAccess and PowerUserAccess), click Next, then Submit | . | . ",
    "url": "/devnotes/dev-ops/aws#setup-aws",
    
    "relUrl": "/dev-ops/aws#setup-aws"
  },"3": {
    "doc": "AWS",
    "title": "AWS",
    "content": " ",
    "url": "/devnotes/dev-ops/aws",
    
    "relUrl": "/dev-ops/aws"
  },"4": {
    "doc": "DevOps",
    "title": "Developer Operations (DevOps)",
    "content": "Command environment configurations and build commands for a variety of systems organized by platform (AWS, GCP, etc.). ",
    "url": "/devnotes/dev-ops#developer-operations-devops",
    
    "relUrl": "/dev-ops#developer-operations-devops"
  },"5": {
    "doc": "DevOps",
    "title": "DevOps",
    "content": " ",
    "url": "/devnotes/dev-ops",
    
    "relUrl": "/dev-ops"
  },"6": {
    "doc": "Elastic Beanstalk",
    "title": "AWS Elastic Beanstalk",
    "content": "Elastic Beanstalk is a platform-as-a-service (PaaS) for hosting web apps. Below are notes on configuring an Elastic Beanstalk environment with a new web app. ",
    "url": "/devnotes/dev-ops/aws/eb#aws-elastic-beanstalk",
    
    "relUrl": "/dev-ops/aws/eb#aws-elastic-beanstalk"
  },"7": {
    "doc": "Elastic Beanstalk",
    "title": "Table of contents",
    "content": ". | Configure Your App to Run on Elastic Beanstalk . | Aligning Environment Software Versions | Installing Dependencies on Elastic Beanstalk | . | Deploying Your App | Configuring DNS for Your App | Setup SSL on EB Environment . | Install Certbot | Allow Traffic on Port 443 | Donwload and Configure Certificate | Automatically Renew the Certificate | . | Where To Look For Logs | . ",
    "url": "/devnotes/dev-ops/aws/eb#table-of-contents",
    
    "relUrl": "/dev-ops/aws/eb#table-of-contents"
  },"8": {
    "doc": "Elastic Beanstalk",
    "title": "Configure Your App to Run on Elastic Beanstalk",
    "content": "Aligning Environment Software Versions . Elastic Beanstalk only supports a few specific versions for the software used in our web app (e.g. Ruby, Puma Server), so we’ll need to make sure our web app is configured to use those versions as well. Otherwise, we’ll run into app install errors. First, take a look at our Gemfile to check the version of Ruby being used. If the Gemfile isn’t using the correct version (3.0.6 at the time of writing), then install the correct version using rbenv. Next, update your Gemfile to use that version of Ruby. The easiest way to do this is to let the Gemfile read .ruby-version file created by rbenv. Next, check the version of Puma being used. Look for puma ... in your Gemfile. If the Gemfile isn’t using the correct version (6.2.2 at the time of writing), then update uninstall the old version and reinstall the new version. Installing Dependencies on Elastic Beanstalk . Elastic Beanstalk uses CentOS on the EC2 instances it spins up, and the default CentOS image is missing some common package dependencies. For example, a default Rails app will need the sqlite Gem which requires a sqlite development package to create the headers. Elastic Beanstalk allows various script hooks and configuration files to be included in your app that will customize the CentOS environment during deployment. We can write a YAML configuration file to install the sqlite-devel dependency from yum package manager. ",
    "url": "/devnotes/dev-ops/aws/eb#configure-your-app-to-run-on-elastic-beanstalk",
    
    "relUrl": "/dev-ops/aws/eb#configure-your-app-to-run-on-elastic-beanstalk"
  },"9": {
    "doc": "Elastic Beanstalk",
    "title": "Deploying Your App",
    "content": "If you don’t already have an EB environment configured, follow the guide AWS provides for setting up an EB environment. However, instead of using the sample application option, you can jump right to deploying your app from the environment setup. To deploy your app, create an app source bundle. In the root of your project directory, run the following commands. This will generate a app source bundle named &lt;my-app-source-bundle&gt;.zip in the directory about your app root directory. Use this file as the app source bundle, then use the AWS EB console to ‘Upload and Deploy’ the source bundle. If your Elastic Beanstalk environment goes to into a ‘Warning’ or ‘Critical’ state, see Where to Look For Logs to debug. ",
    "url": "/devnotes/dev-ops/aws/eb#deploying-your-app",
    
    "relUrl": "/dev-ops/aws/eb#deploying-your-app"
  },"10": {
    "doc": "Elastic Beanstalk",
    "title": "Configuring DNS for Your App",
    "content": "By default, the EB environment will serve your app over HTTP (port 80) using a public domain that looks like &lt;env-name&gt;.&lt;env-prefix&gt;.&lt;region&gt;.elasticbeanstalk.com. If you have a custom domain purchased through a non-AWS provider, this section will walk through routing traffic from your custom domain to your EB environment. First, we’ll use AWS Route 53 to configure our DNS records. Go to Route 53 console. Create a ‘Hosted Zone’ using your root domain for the ‘Domain Name’. Next, we’ll create alias records to route traffic from our root domain and subdomains to go to our EB environment domain. Go to ‘Hosted Zones’ in Route 53 console and select the hosted zone we just created. | Select ‘Create Record’ | Leave subdomain blank for the first record we create so we can create a root record | Select record type ‘A’ | Enable ‘Alias’ toggle | From the ‘Route traffic to’ dropdown, select ‘Alias to Elastic Beanstalk environment’, the region where your EB environment resides, and finally the public domain of your EB environment. | Leave ‘Simple routing’ as the routing policy and ‘Evaluate target health’ enabled. | . Finally, we’ll your configure your domain registrar to use Amazons name servers instead of any default name servers they may be using. For example, in Google Domains under DNS select ‘Custom name servers’. Add the four name servers from the AWS Route 53 NS record. Give the records a few minutes to propagate, then use dig and whois to check that your DNS setup is correct. For example, you can check that your custom domain and EB environment domain point to the same public IP. If you go to your custom domain in a browser and receive a timeout, it’s probably because browsers are forcing connection to HTTPS (port 443) but EB environments serve only on HTTP (port 80) by default. Read on to Setup SSL to install an SSL certificate and serve traffic on port 443. ",
    "url": "/devnotes/dev-ops/aws/eb#configuring-dns-for-your-app",
    
    "relUrl": "/dev-ops/aws/eb#configuring-dns-for-your-app"
  },"11": {
    "doc": "Elastic Beanstalk",
    "title": "Setup SSL on EB Environment",
    "content": "We’ll use certbot to automatically install and renew our certs in our EB environment. The general process is as follows: . | Install Certbot on our EC2 instances | Open 443 port on EC2 instances | Download and configure the certificate in Nginx | Automatically renew the certificate | . Install Certbot . We’ll use our EB configuration files described earlier to install certbot while bringing up EC2 instances. Allow Traffic on Port 443 . We’ll create another EB configuration file to allow traffic from any IP on port 443. Donwload and Configure Certificate . We’ll create a script hook to run certbot after Nginx has been installed and configured on the new EC2 instance. The following file is a script hook as opposed to a configuration file, so it should be placed in .platform/hooks/postdeploy in our app root directory. We also have to have an EB configuration file to grant execute permissions to that script hook. Automatically Renew the Certificate . Finally, we’ll use EB configuration to create a crontab entry to renew the cert every 12 hours. That’s it! Go ahead and redeploy your app and try connecting to the site. You should see the site being served over port 443 (i.e. a lock icon in the browser). ",
    "url": "/devnotes/dev-ops/aws/eb#setup-ssl-on-eb-environment",
    
    "relUrl": "/dev-ops/aws/eb#setup-ssl-on-eb-environment"
  },"12": {
    "doc": "Elastic Beanstalk",
    "title": "Where To Look For Logs",
    "content": "Here’s a list of EB log file locations and what they contain: . | /var/log/eb-engine.log - All deployment steps. If EB configuration or app install fails, the logs will be here. | /var/log/cfn-init.log - EB extension configuration logs only. | /var/log/eb-hooks.log - EB script hooks. | /var/log/puma/ - Logs for Puma server. | . For a full list of log file locations as well as how to customize locations, see the AWS guide. ",
    "url": "/devnotes/dev-ops/aws/eb#where-to-look-for-logs",
    
    "relUrl": "/dev-ops/aws/eb#where-to-look-for-logs"
  },"13": {
    "doc": "Elastic Beanstalk",
    "title": "Elastic Beanstalk",
    "content": " ",
    "url": "/devnotes/dev-ops/aws/eb",
    
    "relUrl": "/dev-ops/aws/eb"
  }
}
